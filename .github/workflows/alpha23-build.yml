name: alpha23-build

on:
  push:
    branches: [alpha23-develop]
  pull_request:
    branches: [alpha23-develop]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        os: [ubuntu-latest]
        python-version: ["3.11"]
    defaults:
      run:
        shell: bash
    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      BUILD_MODE: debug
      RUST_BACKTRACE: 1

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: nautilus
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install runner dependencies
        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Rust version from rust-toolchain.toml
        id: rust-version
        run: |
          version=$(awk -F\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)
          echo "Rust toolchain version $version"
          echo "RUST_VERSION=$version" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}

      - name: Set up Rust tool-chain (Linux, Windows) stable
        uses: actions-rust-lang/setup-rust-toolchain@v1.8
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Python version
        run: |
          version=$(python -c "import sys; print('.'.join(map(str, sys.version_info[:3])))")
          echo "PYTHON_VERSION=$version" >> $GITHUB_ENV

      - name: Get Poetry version from poetry-version
        run: |
          version=$(cat poetry-version)
          echo "POETRY_VERSION=$version" >> $GITHUB_ENV

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec

      - name: Set up cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Set up cached cargo
        id: cached-cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Set poetry cache-dir
        run: echo "POETRY_CACHE_DIR=$(poetry config cache-dir)" >> $GITHUB_ENV

      - name: Poetry cache
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ${{ env.POETRY_CACHE_DIR }}
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Run pre-commit
        run: |
          # pre-commit run --hook-stage manual gitlint-ci
          pre-commit run --all-files

      - name: Set up sccache cache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Install Nautilus CLI and run init postgres
        run: |
          make install-cli
          nautilus database init --schema ${{ github.workspace }}/schema
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DATABASE: nautilus
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
          CARGO_INCREMENTAL: 0

      - name: Set up sccache cache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Run nautilus_core cargo tests (Linux)
        run: |
          if ! command -v cargo-nextest &> /dev/null
          then
              echo "cargo-nextest not found, installing..."
              cargo install cargo-nextest
          else
              echo "cargo-nextest is already installed"
          fi
          make cargo-test
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
          CARGO_INCREMENTAL: 0

      - name: Set up sccache cache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Run tests (Linux)
        run: |
          make pytest
          make test-examples
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
          CARGO_INCREMENTAL: 0
